import BuildConfiguration.Versions.hiltPluginVersion
import BuildConfiguration.Versions.saveArgsPluginVersion


const val kotlinVersion = "1.4.0"
const val customerAppId = "com.tribetayling.customer"
const val vendorAppId = "com.tribetayling.vendor"

object BuildConfiguration {
    private object Versions {
        const val buildToolsVersion = "4.1.2"
        const val googleServicesVersion = "4.3.3"
        const val firebasePerfVersion = "1.3.1"
        const val crashlyticsVersion = "2.3.0"
        const val hiltPluginVersion = "2.28-alpha"
        const val saveArgsPluginVersion = "2.3.0"
    }

    const val androidGradlePlugin = "com.android.tools.build:gradle:${Versions.buildToolsVersion}"
    const val kotlinGradlePlugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    const val googleServices = "com.google.gms:google-services:${Versions.googleServicesVersion}"
    const val firebasePerf = "com.google.firebase:perf-plugin:${Versions.firebasePerfVersion}"
    const val crashlytics =
        "com.google.firebase:firebase-crashlytics-gradle:${Versions.crashlyticsVersion}"
    const val kotlinxSerialization = "org.jetbrains.kotlin:kotlin-serialization:${kotlinVersion}"
    const val hilt = "com.google.dagger:hilt-android-gradle-plugin:${hiltPluginVersion}"
    const val safeArgs =
        "androidx.navigation:navigation-safe-args-gradle-plugin:${saveArgsPluginVersion}"

    object Plugins {
        const val googleServicesPlugin = "com.google.gms.google-services"
        const val androidApplication = "com.android.application"
        const val kotlinAndroid = "kotlin-android"
        const val kotlinAndroidExtensions = "kotlin-android-extensions"
        const val firebasePerfPlugin = "com.google.firebase.firebase-perf"
        const val kotlinxSerializationPlugin = "kotlinx-serialization"
        const val kotlinKapt = "kotlin-kapt"
        const val crashlytics = "com.google.firebase.crashlytics"
        const val androidLibrary = "com.android.library"
        const val hiltPlugin = "dagger.hilt.android.plugin"
        const val kotlin = "kotlin"
        const val safeArgs = "androidx.navigation.safeargs.kotlin"

    }
}

object SigningConfigs {
    const val debug = "debug"
    const val release = "release"

    object Release {
        const val location = "../buildSrc/keystore/SmannCustomer.jks"
        const val aliasKey = "KEY_ALIAS"
        const val keyPasswordKey = "KEY_PASSWORD"
        const val storePasswordKey = "STORE_PASSWORD"
    }

    object Debug {
        const val location = "../buildSrc/keystore/debug_keystore"
        const val alias = "smaan"
        const val storePassword = "smaan-pass"
        const val keyPassword = "smaan-pass"
    }
}


object AndroidSdk {
    const val compileSdk = 30
    const val minSdk = 21
    const val targetSdk = compileSdk
    const val customerVersionCode = "customer_version_code"
    const val customerVersionName = "customer_version_name"
    const val vendorVersionCode = "vendor_version_code"
    const val vendorVersionName = "vendor_version_name"
}

object Libraries {
    private object Versions {

        const val appCompat = "1.2.0"
        const val swipeRefresh = "1.1.0"
        const val materialDesign = "1.3.0-alpha04"
        const val legacySupport = "1.1.0"
        const val ktx = "1.1.0"
        const val constraintLayout = "2.0.0-beta7"
        const val firebasePerf = "19.0.10"
        const val fcm = "20.1.6"
        const val coroutinesPlayServices = "1.4.2"
        const val crashlytics = "17.3.0"
        const val roomVersion = "2.2.3"
        const val ktxSerialization = "1.0.0-RC"
        const val retrofit = "2.7.1"
        const val timber = "4.7.1"
        const val coroutines = "1.4.0"
        const val okHttp = "4.3.1"
        const val flipper = "0.31.2"
        const val flipperNetwork = "0.47.0"
        const val soLoader = "0.8.2"
        const val mmkv = "1.0.24"
        const val fragment = "1.2.1"
        const val playServicesMapsVersion = "17.0.0"
        const val placesLocationApi = "2.2.0"
        const val playServicesLocationVersion = "17.1.0"
        const val androidxAnnotation = "1.1.0"
        const val sl4j = "1.7.30"
        const val logback = "2.0.0"
        const val okhttpLoggingInterceptor = "4.3.1"
        const val chuckNetworkInterceptor = "1.1.0"
        const val workManager = "2.4.0"
        const val threetenbp = "1.4.0"
        const val twilio = "6.1.0"
        const val firebaseConfig = "20.0.2"
        const val firebaseBom = "26.2.0"
        const val firebaseAnalyticsKtx = "18.0.0"
        const val dagger2 = "2.26"
        const val daggerHiltAndroidVersion = "2.28-alpha"
        const val daggerHiltVersion = "1.0.0-alpha02"
        const val googleAuth = "18.1.0"
        const val googleBase = "10.2.0"
        const val archComponents = "2.2.0"
        const val navigation = "2.3.0"
        const val appAuth = "0.7.1"
        const val kotlinxSerializationConverter = "0.7.0"
        const val stateMachine = "0.2.0"
        const val activityKtx = "1.2.0-alpha06"
        const val shimmerLayout = "0.5.0"
        const val glide = "4.11.0"
        const val pix = "1.5.3"
        const val multipleSelector = "v1.9"
        const val countryCodePicker = "2.4.0"
        const val touchImageView = "3.0.1"
        const val browser = "1.2.0"
        const val dataDog = "1.6.0"
        const val swipeRecyclerView = "1.2.3"
    }

    object Firebase {
        const val firebaseBom = "com.google.firebase:firebase-bom:${Versions.firebaseBom}"
        const val firebaseConfig = "com.google.firebase:firebase-config-ktx"
        const val firebaseAnalyticsKtx = "com.google.firebase:firebase-analytics-ktx"
        const val firebasePerf = "com.google.firebase:firebase-perf"
        const val crashlytics = "com.google.firebase:firebase-crashlytics"
        const val fcm = "com.google.firebase:firebase-messaging"
        const val liveDatabase = "com.google.firebase:firebase-database-ktx"

    }

    object Hilt {
        const val dagger = "com.google.dagger:dagger:${Versions.dagger2}"
        const val hiltAndroid =
            "com.google.dagger:hilt-android:${Versions.daggerHiltAndroidVersion}"
        const val hiltCommon = "androidx.hilt:hilt-common:${Versions.daggerHiltVersion}"
        const val hiltLifeCycle =
            "androidx.hilt:hilt-lifecycle-viewmodel:${Versions.daggerHiltVersion}"
        const val daggerCompiler = "com.google.dagger:dagger-compiler:${Versions.dagger2}"
        const val hiltAndroidCompiler =
            "com.google.dagger:hilt-android-compiler:${Versions.daggerHiltAndroidVersion}"
        const val hiltCompiler = "androidx.hilt:hilt-compiler:${Versions.daggerHiltVersion}"
        const val hiltWorker = "androidx.hilt:hilt-work:${Versions.daggerHiltVersion}"
    }

    object Google {
        const val googleAuth = "com.google.android.gms:play-services-auth:${Versions.googleAuth}"
        const val googleBase = "com.google.android.gms:play-services-base:${Versions.googleBase}"

        const val googlePlaces =
            "com.google.android.libraries.places:places:${Versions.placesLocationApi}"
        const val appAuth = "net.openid:appauth:${Versions.appAuth}"
        const val coroutinesPlayServices =
            "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:${Versions.coroutinesPlayServices}"
    }

    object Facebook {
        const val flipper = "com.facebook.flipper:flipper:${Versions.flipper}"
        const val soLoader = "com.facebook.soloader:soloader:${Versions.soLoader}"
        const val flipperNoOp = "com.facebook.flipper:flipper-noop:${Versions.flipper}"
        const val flipperNetwork =
            "com.facebook.flipper:flipper-network-plugin:${Versions.flipperNetwork}"
        const val shimmerLayout = "com.facebook.shimmer:shimmer:${Versions.shimmerLayout}"
    }

    object Arch {
        const val lifeCycleViewModel =
            "androidx.lifecycle:lifecycle-viewmodel-ktx:${Versions.archComponents}"
        const val lifeCycleCompiler =
            "androidx.lifecycle:lifecycle-compiler:${Versions.archComponents}"
        const val lifeCycleExtensions =
            "androidx.lifecycle:lifecycle-extensions:${Versions.archComponents}"
        const val lifeCycleRuntime =
            "androidx.lifecycle:lifecycle-runtime-ktx:${Versions.archComponents}"
    }

    object Navigation {
        const val navigationFragment =
            "androidx.navigation:navigation-fragment-ktx:${Versions.navigation}"
        const val navigationUiKtx = "androidx.navigation:navigation-ui-ktx:${Versions.navigation}"
    }

    object Network {
        const val okHttp = "com.squareup.okhttp3:okhttp:${Versions.okHttp}"
        const val okHttpLoggingInterceptor =
            "com.squareup.okhttp3:logging-interceptor:${Versions.okhttpLoggingInterceptor}"
        const val retrofit = "com.squareup.retrofit2:retrofit:${Versions.retrofit}"
        const val kotlinxSerialisationHeaderInterceptor =
            "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:${Versions.kotlinxSerializationConverter}"
        const val chuckNetworkInterceptor =
            "com.readystatesoftware.chuck:library:${Versions.chuckNetworkInterceptor}"
    }

    object Chat {
        const val twilio = "com.twilio:chat-android:${Versions.twilio}"
    }

    object PaymentGateway {
        const val paytm = "com.paytm.appinvokesdk:appinvokesdk:1.5.3"
    }

    object Design {
        const val materialDesign = "com.google.android.material:material:${Versions.materialDesign}"
    }

    object Glide {
        const val glide = "com.github.bumptech.glide:glide:${Versions.glide}"
        const val compiler = "com.github.bumptech.glide:compiler:${Versions.glide}"
    }

    object SwipeRecyclerView {
        const val swipeRecyclerView = "it.xabaras.android:recyclerview-swipedecorator:${Versions.swipeRecyclerView}"
    }



    object DataDog {
        const val dataDog = "com.datadoghq:dd-sdk-android:${Versions.dataDog}"
        const val dataDogTimber = "com.datadoghq:dd-sdk-android-timber:${Versions.dataDog}"
    }

    const val kotlinStdLib = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    const val appCompat = "androidx.appcompat:appcompat:${Versions.appCompat}"
    const val swipeRefresh =
        "androidx.swiperefreshlayout:swiperefreshlayout:${Versions.swipeRefresh}"
    const val legacySupport = "androidx.legacy:legacy-support-v4:${Versions.legacySupport}"
    const val ktxCore = "androidx.core:core-ktx:${Versions.ktx}"
    const val constraintLayout =
        "androidx.constraintlayout:constraintlayout:${Versions.constraintLayout}"
    const val roomRuntime = "androidx.room:room-runtime:${Versions.roomVersion}"
    const val roomCompiler = "androidx.room:room-compiler:${Versions.roomVersion}"
    const val roomKtx = "androidx.room:room-ktx:${Versions.roomVersion}"
    const val kotlinxSerialization =
        "org.jetbrains.kotlinx:kotlinx-serialization-core:${Versions.ktxSerialization}"
    const val kotlinxJvmSerialization =
        "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:${Versions.ktxSerialization}"

    const val timber = "com.jakewharton.timber:timber:${Versions.timber}"
    const val coroutineCore = "org.jetbrains.kotlinx:kotlinx-coroutines-core:${Versions.coroutines}"
    const val coroutineAndroid =
        "org.jetbrains.kotlinx:kotlinx-coroutines-android:${Versions.coroutines}"

    const val mmkv = "com.tencent:mmkv-static:${Versions.mmkv}"
    const val fragments = "androidx.fragment:fragment-ktx:${Versions.fragment}"
    const val location =
        "com.google.android.gms:play-services-location:${Versions.playServicesLocationVersion}"
    const val maps = "com.google.android.gms:play-services-maps:${Versions.playServicesMapsVersion}"
    const val androidxAnnotation = "androidx.annotation:annotation:${Versions.androidxAnnotation}"
    const val sl4jLogger = "org.slf4j:slf4j-api:${Versions.sl4j}"
    const val logback = "com.github.tony19:logback-android:${Versions.logback}"
    const val workRuntime = "androidx.work:work-runtime-ktx:${Versions.workManager}"
    const val threeTenBp = "org.threeten:threetenbp:${Versions.threetenbp}"
    const val threeTenBpNoTzDb = "org.threeten:threetenbp:${Versions.threetenbp}:no-tzdb"

    const val activityKtx = "androidx.activity:activity-ktx:${Versions.activityKtx}"
    const val stateMachine = "com.tinder.statemachine:statemachine:${Versions.stateMachine}"

    const val countryCodePicker = "com.hbb20:ccp:${Versions.countryCodePicker}"
    const val pixImagePicker = "com.fxn769:pix:${Versions.pix}"
    const val multipleSelector =
        "com.github.abumoallim:Android-Multi-Select-Dialog:${Versions.multipleSelector}"
    const val touchImageView = "com.github.MikeOrtiz:TouchImageView:${Versions.touchImageView}"

    const val browser = "androidx.browser:browser:${Versions.browser}"
}

object SubModules {
    const val location = ":locationmodule"
    const val daggerutil = ":daggerutil"
    const val common = ":common"
    const val localStorage = ":localstorage"
    const val tracker = ":tracker"
    const val logger = ":logger"
    const val appArch = ":apparch"
    const val featureConfig = ":featureconfig"
    const val network = ":network"
    const val worker = ":worker"
    const val oauthlib = ":oauthlib"
    const val statemachine = ":statemachine"
    const val paymentGateway = ":paymentgateway"
    const val chat = ":chat"
    const val appStyle = ":appstyle"
    const val liveStorage = ":livestorage"
    const val repository = ":repository"
}

object TestLibraries {

    private object Versions {
        const val junit4 = "4.12"
        const val testRunner = "1.1.1"
        const val espresso = "3.2.0"
        const val roomVersion = "2.2.3"
        const val okHttp = "4.3.1"
        const val fragment = "1.2.1"
        const val workManagerVersion = "2.3.0"
        const val hilt = "2.28-alpha"
    }

    const val junit4 = "junit:junit:${Versions.junit4}"
    const val testRunner = "androidx.test:runner:${Versions.testRunner}"
    const val espresso = "androidx.test.espresso:espresso-core:${Versions.espresso}"
    const val roomTestHelper = "androidx.room:room-testing:${Versions.roomVersion}"
    const val mockWebServer = "com.squareup.okhttp3:mockwebserver:${Versions.okHttp}"
    const val fragments = "androidx.fragment:fragment-testing:${Versions.fragment}"
    const val workTest = "androidx.work:work-testing:${Versions.workManagerVersion}"

    const val hiltTest = "com.google.dagger:hilt-android-testing:${Versions.hilt}"
}